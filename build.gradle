plugins {
    id 'application'
    id 'java'
    id 'java-library'
    id 'net.nemerosa.versioning' version '2.8.2'
    id 'org.asciidoctor.jvm.convert' version '2.3.0'
    id 'com.github.ben-manes.versions' version '0.25.0'
}

repositories {
	mavenCentral()
	mavenLocal()
}

ext {
	slf4jVersion = '1.7.28'
}

dependencies {
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.9'
    compile 'com.github.javafaker:javafaker:1.0.1'
    compile 'com.ibm.db2:jcc:11.5.0.0'
    compile 'com.microsoft.sqlserver:mssql-jdbc:7.4.1.jre8'
    compile 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    compile 'com.redislabs:jredisearch:1.0.0'
    compile 'com.redislabs:lettusearch:1.6.0'
    compile 'com.zaxxer:HikariCP:3.4.1'
    compile 'info.picocli:picocli:4.0.4'
    compile 'org.apache.commons:commons-pool2:2.7.0'
    compile 'org.latencyutils:LatencyUtils:2.0.3'
    compile 'org.postgresql:postgresql:42.2.8'
    compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:slf4j-jdk14:${slf4jVersion}"
    compile 'org.springframework.batch:spring-batch-core:4.1.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-autoconfigure:2.1.8.RELEASE'
    compile 'org.springframework:spring-jdbc:5.1.9.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-aws-context:2.1.3.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-aws-autoconfigure:2.1.3.RELEASE'
    compile 'org.xerial:sqlite-jdbc:3.28.0'
    compile 'redis.clients:jedis:3.1.0'
    testCompile 'org.codehaus.plexus:plexus-utils:3.2.1'
    testCompile 'org.hsqldb:hsqldb:2.5.0'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

test {
    useJUnitPlatform()
}

group = 'com.redislabs'
version = versioning.info.display
description = 'RIOT'
sourceCompatibility = '1.8'

application {
	mainClassName = 'com.redislabs.riot.Riot'
}

jar {
    manifest {
        attributes("Implementation-Title": "RIOT",
                   "Implementation-Version": version)
    }
}

tasks.withType(Tar){
    compression = Compression.GZIP
}

asciidoctor {
  outputDir = file('docs')
  attributes revnumber : '1.0'
  outputOptions {
  	separateOutputDirs = false
  }
}