plugins {
    id 'application'
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'org.asciidoctor.jvm.convert' version '2.3.0'
    id 'net.nemerosa.versioning' version '2.10.0'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

repositories {
	mavenCentral()
	mavenLocal()
}


dependencies {
    implementation 'com.redislabs:picocli-redis:1.4.8'
    implementation 'org.springframework.batch:spring-batch-core:4.2.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE'
    implementation 'org.springframework:spring-jdbc:5.2.2.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-aws-context:2.2.1.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-aws-autoconfigure:2.2.1.RELEASE'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.10.2'
    implementation 'com.github.javafaker:javafaker:1.0.1'
    implementation 'com.zaxxer:HikariCP:3.4.1'
    implementation 'me.tongfei:progressbar:0.8.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    testImplementation 'org.codehaus.plexus:plexus-utils:3.3.0'
    testImplementation 'org.hsqldb:hsqldb:2.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'it.ozimov:embedded-redis:0.7.2'
//    implementation 'org.xerial:sqlite-jdbc:3.28.0'
//    implementation 'com.ibm.db2:jcc:11.5.0.0'
//    implementation 'com.microsoft.sqlserver:mssql-jdbc:7.4.1.jre8'
//    implementation 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
//    implementation 'org.postgresql:postgresql:42.2.8'
}

test {
    useJUnitPlatform()
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = 'riot'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Redislabs-Solution-Architects/picocli-redis.git'
    }
    version {
    	gpg {
    		sign = true
    	}
    	mavenCentralSync {
    		sync = true
    	}
    }
    publish = true
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.redislabs'
            artifactId 'riot'
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'RIOT'
                packaging = 'jar'
                description = 'Redis Input/Output Tool'
                url = 'https://github.com/Redislabs-Solution-Architects/riot'

		        scm {
		          connection = 'scm:git:git://github.com/Redislabs-Solution-Architects/riot.git'
		          developerConnection = 'scm:git:git@github.com:Redislabs-Solution-Architects/riot.git'
		          url = 'https://github.com/Redislabs-Solution-Architects/riot'
		        }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'jruaux'
                        name = 'Julien Ruaux'
                    }
                }
            }
        }
    }
}


group = 'com.redislabs'
version = versioning.info.display
description = 'RIOT'
sourceCompatibility = '1.8'

application {
	mainClassName = 'com.redislabs.riot.Riot'
}

jar {
    manifest {
        attributes("Implementation-Title": "RIOT",
                   "Implementation-Version": archiveVersion)
    }
}

tasks.withType(Tar){
    compression = Compression.GZIP
}

asciidoctor {
  outputDir = file('docs')
  attributes revnumber : '1.0'
  baseDir = 'src/docs/asciidoc'
  outputOptions {
  	separateOutputDirs = false
  }
}